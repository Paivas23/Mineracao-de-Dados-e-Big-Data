import pandas as pd
import plotly.express as px
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.dummy import DummyClassifier
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSU4d23rhGCekCfveIitdMVo1qU8FmJYX_33zb1J_w03v9k7oqvvIEs8y2gTZvZxzhUu8V7xlITWzDq/pub?output=csv'
data = pd.read_csv(url)

for col in ['estado_civil', 'escolaridade', 'inadimplencia', 'fez_emprestimo', 'aderencia_investimento']:
    print(data[col].unique())

def plot_histogram(column):
    fig = px.histogram(data, x=column, text_auto=True, color="aderencia_investimento", barmode="group")
    fig.show()

for col in ['aderencia_investimento', 'estado_civil', 'escolaridade', 'inadimplencia', 'fez_emprestimo']:
    plot_histogram(col)

for col in ['idade', 'saldo', 'tempo_ult_contato', 'numero_contatos']:
    px.box(data, x=col, color="aderencia_investimento").show()

X = data.drop("aderencia_investimento", axis=1)
y = LabelEncoder().fit_transform(data["aderencia_investimento"])

one_hot = make_column_transformer((OneHotEncoder(drop="if_binary"), ['estado_civil', 'escolaridade', 'inadimplencia', 'fez_emprestimo']), remainder='passthrough', sparse_threshold=0)
X = one_hot.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, stratify=y, random_state=1234)

dummy = DummyClassifier()
dummy.fit(X_train, y_train)
print(f"Score Dummy: {round(dummy.score(X_test, y_test), 2)}")

tree = DecisionTreeClassifier(max_depth=3, random_state=4321)
tree.fit(X_train, y_train)
print(f"Score Árvore de Decisão: {round(tree.score(X_test, y_test), 2)}")

scaler = MinMaxScaler()
X_train_norm = scaler.fit_transform(X_train)
X_test_norm = scaler.transform(X_test)

knn = KNeighborsClassifier()
knn.fit(X_train_norm, y_train)
print(f"Score KNN: {round(knn.score(X_test_norm, y_test), 2)}")

plt.figure(figsize=(100, 50))
plot_tree(tree, filled=True, feature_names=one_hot.get_feature_names_out(), class_names=['sim', 'nao'])
plt.show()

pd.to_pickle(tree, 'modelo_arvore_inadimplencia.pkl')
pd.to_pickle(one_hot, 'onehotencoder.pkl')

novo_dado = pd.DataFrame({
    'idade': [45],
    'estado_civil': ['solteiro (a)'],
    'escolaridade': ['superior'],
    'inadimplencia': ['nao'],
    'saldo': [23040],
    'fez_emprestimo': ['nao'],
    'tempo_ult_contato': [800],
    'numero_contatos': [4]
})

novo_dado_transformed = one_hot.transform(novo_dado)
modelo_arvore = pd.read_pickle('modelo_arvore_inadimplencia.pkl')
previsao = modelo_arvore.predict(novo_dado_transformed)
print(previsao)
